SHELL := /bin/bash

clean-containers:
	docker-compose $(ymls) down -v --remove-orphan


clean-experiment:
	docker-compose run --rm tensorflow rm -r $(output-path)


clean-experiment-cloud:
	docker-compose run --rm tensorflow gsutil rm -r $(output-path-cloud)


#Train files
download-files:
	for f in ${files}; do docker-compose run --rm tensorflow gsutil cp gs://hr-tensorflow/cachete/input_files/$$f $(path-files)$$f; done;

adapt-input-file:
	sed 's/"//g' $(path-files)${raw-input-file} > $(path-files)$(file-clean)
	docker-compose $(ymls) run --rm tensorflow python cache/adapt_input_data.py /$(path-files)$(file-clean) /$(path-files)${file-train} /$(path-files)${file-test} 20 True
	rm $(path-files)$(file-clean)

# Train
train-python:
	docker-compose $(ymls) run --rm tensorflow python -m cache.main \
		--out_dir=$(output-path) \
		--train_file=${file-train} \
		--test_file=${file-test} \
		--train_steps=$(train-steps) \
		$(config_file)


train-local:
	./dgcloud ml-engine local train \
		--module-name=cache.main \
		--package-path=cache \
		--job-dir=$(job-dir) \
		-- \
		--out_dir=$(output-path) \
		--train_file=$(file-train) \
	    --test_file=$(file-test) \
	    --train_steps=$(train-steps)


train-cloud:
	$(eval export output-path-cloud)
	$(MAKE) clean-experiment-cloud
	job=$${job:-$(job-prefix)$$( \
		num=$$(./dgcloud ml-engine jobs list | grep $(job-prefix) | sed 's/$(job-prefix)//' | sed 's/ .*//' | sort -g | tail -n 1); \
		if [ $$num ]; then echo $$(($$num + 1)); else echo 0; fi \
		)}; \
		./dgcloud ml-engine jobs submit training $$job \
		--module-name=cache.main \
		--package-path=cache \
		--job-dir=$(job-dir) \
		-- \
		--out_dir=$(output-path-cloud) \
		--train_file=$(file-train-cloud) \
		--test_file=$(file-test-cloud) \
		--train_steps=$(train-steps)


# Jobs
job-func:
	@job=$${job:-$(job-prefix)$$(./dgcloud ml-engine jobs list \
		| grep $(job-prefix) | sed 's/$(job-prefix)//' | sed 's/ .*//' \
		| sort -g | tail -n 1)}; \
		$(func) $$job

#Requirements
requirements.txt:
	OUT=training/requirements.txt; \
		echo "# This is an autogenerated requirements file, do not modify" > $$OUT; \
		for i in $$(cd training; python -c "from setup import echo_requirements; echo_requirements()"); \
		do echo $$i >> $$OUT; done;
